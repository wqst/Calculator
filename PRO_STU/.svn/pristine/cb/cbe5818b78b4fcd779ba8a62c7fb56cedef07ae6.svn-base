// Generated by CoffeeScript 1.6.3
(function() {
  var DialogViewModel, Extension, HighlineProvider, UIView, UIProvider, ReportView, Provider, ReportViewModel, View, _ref, _ref1, _ref2, _ref3,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;


// A global function to get get the value by key
  this.messages = {
    get: function(key) {
      var _ref;
      return (_ref = this['en'][key]) != null ? _ref : '#' + key + '#';
    }
  };

//Some default settings like hash table to get the text string / sentence by the key 
  this.messages.en = {
    filter_dialog_title: 'block',
    enable: 'Enable',
    disable: 'Disable',
    excluding: 'Excluding',
    including: 'Including',
    tweets_terms: 'tweets containing terms',
    tweets_users: 'tweets from people',
    filter_terms_list_title: 'Terms separated by commas,<br/>eg.: twitcam, #fail',
    filter_users_list_title: 'Usernames separated by commas,<br/>eg.: twitterowsky, robocopano',
    show_report_view: 'Show report of filtered tweets.',
    filtering_by_start: 'Hiding',
    filtering_by_end: 'tweets by block of',
    filtering_by_end_singular: 'tweet by block of',
    users_with_hidden_tweets: 'Users with hidden tweets',
    terms: 'terms',
    people: 'people',
    and: 'and',
    clear: 'Clear',
    filter: 'block',
    welcome_tip: 'Pssst... Here you can configure<br/>the Open Tweet Block extension. â†’'
  };

  /*
      A base function to set the default attributes of different variables
  */
  DialogViewModel = (function() {
    DialogViewModel.prototype.version = 2;

    DialogViewModel.prototype.settings = {
      termsList: '',
      termsExclude: true,
      usersList: '',
      usersExclude: true,
      enabled: true,
      showReportView: true
    };

    
    /*function for state transition
      term/author exclude/include:
      exclude: click to block the tweets except the ones contain the term;
      include: click to block the tweets that contain the contain the term;
    */ 
    function DialogViewModel() {
      var $default, setting, _ref,
        _this = this;
      this.showWelcomeTip = ko.observable(true, {
        persist: 'TwitterFilter.showWelcomeTip_004'
      });
      _ref = this.settings;
      for (setting in _ref) {
        $default = _ref[setting];
        this[setting] = ko.observable($default, {
          persist: 'TwitterFilter.' + setting
        });
      }

      this.visible = ko.observable(false);
      this.toggleText = ko.computed(function() {
        if (_this.enabled()) {
          return messages.get('disable');
        } else {
          return messages.get('enable');
        }
      });
      this.termsExcludeText = ko.computed(function() {
        if (_this.termsExclude()) {
          return messages.get('excluding');
        } else {
          return messages.get('including');
        }
      });
      this.usersExcludeText = ko.computed(function() {
        if (_this.usersExclude()) {
          return messages.get('excluding');
        } else {
          return messages.get('including');
        }
      });
      this.bookmarklet = ko.computed(function() {
        var code, set, sets;
        set = function(setting) {
          var observable, value;
          observable = _this[setting];
          value = JSON.stringify(observable()).replace(/\\/g, "\\\\").replace(/\'/g, "\\'");
          return "s('" + observable.persistKey + "','" + value + "');";
        };
        sets = ((function() {
          var _results;
          _results = [];
          for (setting in this.settings) {
            _results.push(set(setting));
          }
          return _results;
        }).call(_this)).join('');
        code = "javascript:(function(){\nfunction s(k,v){window.localStorage.setItem(k,v);}\n" + sets + "\n$('<div id=\"filter-reload\" data-version=\"" + _this.version + "\"></div>').appendTo($('#filter-button'));\n})();";
        return code.replace(/\n/g, '');
      });
    }

    //Clear all the input key / authors
    DialogViewModel.prototype.clear = function() {
      var $default, setting, _ref, _results;
      _ref = this.settings;
      _results = [];
      for (setting in _ref) {
        $default = _ref[setting];
        _results.push(this[setting]($default));
      }
      return _results;
    };

    //Reload for every time that refresh the website
    DialogViewModel.prototype.reload = function() {
      var setting, _results;
      _results = [];
      for (setting in this.settings) {
        _results.push(this[setting].reload());
      }
      return _results;
    };


    //Save the settings back
    DialogViewModel.prototype.onSettingsChange = function(callback) {
      var setting, _results;
      _results = [];
      for (setting in this.settings) {
        _results.push(this[setting].subscribe(callback));
      }
      return _results;
    };

    //Change the state betwen different states
    DialogViewModel.prototype.toggle = function(attr) {
      return this[attr](!this[attr]());
    };

    //Enable the changes
    DialogViewModel.prototype.toggleEnabled = function() {
      return this.toggle('enabled');
    };

    /*
      Helper function for different kinds of toggles
    */
    DialogViewModel.prototype.toggleVisible = function() {
      return this.toggle('visible');
    };

    DialogViewModel.prototype.toggleTermsExclude = function() {
      return this.toggle('termsExclude');
    };

    DialogViewModel.prototype.toggleUsersExclude = function() {
      return this.toggle('usersExclude');
    };

    DialogViewModel.prototype.toggleShowReportView = function() {
      return this.toggle('showReportView');
    };

    return DialogViewModel;

  })();

  /*
    Use Knockout js library to show the special effects for toggle functins
  */
  ReportViewModel = (function() {
    function ReportViewModel(dialogViewModel) {
      var _this = this;

      //Default settings
      this.applied = ko.observable(false);
      this.hasTerms = ko.observable(false);
      this.hasUsers = ko.observable(false);
      this.hiddenCount = ko.observable(false);
      this.hiddenUsers = ko.observable(false);
      this.visible = ko.computed(function() {
        return dialogViewModel.showReportView() && _this.applied() && (_this.hasTerms() || _this.hasUsers());
      });
      this.hasHiddenTweets = ko.computed(function() {
        return _this.hiddenCount() !== 0;
      });

      //Judge the number of the blocks
      this.filteringByEndMessage = ko.computed(function() {
        if (_this.hiddenCount() === 1) {
          return messages.get('filtering_by_end_singular');
        } else {
          return messages.get('filtering_by_end');
        }
      });

      //Judge whether we have things needed to be blocked
      this.filtersMessage = ko.computed(function() {
        var blocks;
        blocks = [];
        if (_this.hasTerms()) {
          blocks.push(messages.get('terms'));
        }
        if (_this.hasUsers()) {
          blocks.push(messages.get('people'));
        }
        return blocks.join(' ' + messages.get('and') + ' ');
      });

      //Create the objects for users' photos by the attributes
      this.usersPhotos = ko.computed(function() {
        var src, title, _ref, _results;
        _ref = _this.hiddenUsers();
        _results = [];
        for (title in _ref) {
          src = _ref[title];
          if (src) {
            _results.push({
              title: title,
              src: src
            });
          }
        }
        return _results;
      });

      //Create the arrays for saving users' name
      this.usersNames = ko.computed(function() {
        var src, title, _ref, _results;
        _ref = _this.hiddenUsers();
        _results = [];
        for (title in _ref) {
          src = _ref[title];
          if (!src) {
            _results.push(title);
          }
        }
        return _results;
      });
    }

    return ReportViewModel;

  })();

  //Base function to create the view
  View = (function() {
    function View() {}

    View.prototype.render = function(viewModel) {
      throw new Error('Not implemented');
    };

    return View;

  })();

  //Derived function for View and create the UI
  UIView = (function(_super) {
    var _this = this;

    __extends(UIView, _super);

    function UIView() {
      _ref = UIView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UIView.prototype.render = function(viewModel) {
      this.renderButton(viewModel);
      this.renderDialog(viewModel);
      return this.showWelcomeTip(viewModel);
    };

    // Create the button
    UIView.prototype.renderButton = function(viewModel) {
      var buttonTemplate;
      buttonTemplate = function() {
        return li('#filter-button', {
          'data-name': 'filter'
        }, function() {
          return a('.js-filter-dialog', {
            href: '#',
            'data-bind': 'click: toggleVisible'
          }, function() {
            return messages.get('filter');
          });
        });
      };
      //Put the "block" button on the 3rd location for dropdown list
      $('#user-dropdown ul li:nth-child(3)').after(CoffeeKup.render(buttonTemplate));
      return ko.applyBindings(viewModel, $('#filter-button')[0]);
    };

    //Create the UI that opened when click on the button
    UIView.prototype.renderDialog = function(viewModel) {
      var dialogHtml,
        _this = this;
      dialogHtml = CoffeeKup.render(this.dialogTemplate);
      return viewModel.visible.subscribe(function(visible) {
        return _this.visibleToggled(visible, dialogHtml, viewModel, {
          appendTo: 'body',
          center: true
        });
      });
    };

    UIView.prototype.dialogHeaderSelector = '.modal-header';

    //Create the things inside the open UI
    UIView.prototype.dialogTemplate = function() {
      return div('#filter-dialog-container.modal-container.draggable', function() {
        //Close
        div('.close-modal-background-target', function() {});
        return div('#filter-dialog.modal', function() {
          return div('.modal-content', function() {
            button('.modal-btn.modal-close', {
              'data-bind': 'click: toggleVisible'
            }, function() {
              return span('.Icon.Icon--close.Icon--medium', function() {});
            }); //close
            div('.twttr-dialog-header.modal-header', function() {
              return h3(function() {
                return messages.get('filter_dialog_title');
              });
            });
            div('.modal-body', function() {
              return fieldset(function() {
                a('.btn.filter-list-label', {
                  'data-bind': 'text: termsExcludeText, click: toggleTermsExclude'
                });
                div('.filter-list-label', function() {
                  return '&nbsp;' + messages.get('tweets_terms') + ':';
                });
                //terms
                input('.filter-terms-list', {
                  'type': 'text',
                  'data-bind': "value: termsList, valueUpdate: ['change', 'afterkeydown']"
                });
                div(function() {
                  return '&nbsp;';
                });
                a('.btn.filter-list-label', {
                  'data-bind': 'text: usersExcludeText, click: toggleUsersExclude'
                });
                div('.filter-list-label', function() {
                  return '&nbsp;' + messages.get('tweets_users') + ':';
                });
                //users
                input('.filter-users-list', {
                  'type': 'text',
                  'data-bind': "value: usersList, valueUpdate: ['change', 'afterkeydown']"
                });
                //show the blocked ones
                return label('.checkbox', function() {
                  input({
                    'type': 'checkbox',
                    'data-bind': "checked: showReportView"
                  });
                  return span({
                    'data-bind': 'click: toggleShowReportView'
                  }, function() {
                    return messages.get('show_report_view');
                  });
                });
              });
            });
            //Buttons on the bottom
            return div('.twttr-dialog-footer.modal-footer', function() {
              div('.filter-dialog-footer-left', function() {
                return a('.btn', {
                  'data-bind': 'click: clear'
                }, function() {
                  return messages.get('clear');
                });
              });
              return div('.filter-dialog-footer-right', function() {
                return a('.btn', {
                  'data-bind': 'text: toggleText, click: toggleEnabled'
                });
              });
            });
          });
        });
      });
    };

    //Special effects for different buttons in the UI
    UIView.prototype.visibleToggled = (function() {
      var container, overlay;
      container = null;
      overlay = $('<div class="twttr-dialog-overlay"></div>').appendTo($('body'));
      return function(visible, dialogHtml, viewModel, options) {
        var dialog;
        if (visible) {
          overlay.show();
          container = $(dialogHtml).appendTo($(options.appendTo));
          container.show();
          if (options.center) {
            dialog = $('#filter-dialog');
            dialog.css('position', 'absolute').css('top', (($(window).height() - dialog.outerHeight()) / 2) + 'px').css('left', (($(window).width() - dialog.outerWidth()) / 2) + 'px');
          }
          container.draggable({
            handle: this.dialogHeaderSelector
          });
          container.on('keydown keypress', function(event) {
            return event.stopPropagation();
          });
          container.find('.filter-terms-list').tipsy({
            gravity: 'w',
            trigger: 'focus',
            html: true,
            fallback: messages.get('filter_terms_list_title')
          });
          container.find('.filter-users-list').tipsy({
            gravity: 'w',
            trigger: 'focus',
            html: true,
            fallback: messages.get('filter_users_list_title')
          });
          viewModel.reload();
          return ko.applyBindings(viewModel, container[0]);
        } else {
          container.find('.filter-terms-list').tipsy('hide');
          container.find('.filter-users-list').tipsy('hide');
          container.find('.filter-bookmarklet').tipsy('hide');
          ko.cleanNode(container[0]);
          container.remove();
          return overlay.hide();
        }
      };
    })();

    UIView.prototype.welcomeTip = function() {
      return $('#user-dropdown');
    };

    //Set the open ability
    UIView.prototype.showWelcomeTip = function(viewModel) {
      var _this = this;
      if (viewModel.showWelcomeTip()) {
        return setTimeout(function() {
          _this.welcomeTip().tipsy({
            gravity: 'e',
            trigger: 'manual',
            html: true,
            fallback: messages.get('welcome_tip')
          }).tipsy('show').click(function() {
            return $(this).tipsy('hide');
          });
          setTimeout(function() {
            return _this.welcomeTip().tipsy('hide');
          }, 30000);
          return viewModel.showWelcomeTip(false);
        }, 3000);
      }
    };

    return UIView;

  }).call(this, View);

  //Class for creating the blocked tweets' users and count the # of blocked tweets
  ReportView = (function(_super) {
    __extends(ReportView, _super);

    function ReportView() {
      _ref1 = ReportView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ReportView.prototype.template = function() {
      return div('.filter-report-component.component', {
        'data-bind': 'visible: visible'
      }, function() {
        return div('.module', function() {
          return div('.flex-module', function() {
            div('.flex-module-header', function() {
              return h3(headerTemplate);
            });
            return div('.flex-module-inner', function() {
              return div(bodyTemplate);
            });
          });
        });
      });
    };

    //Count and filter messages
    ReportView.prototype.headerTemplate = function() {
      text(messages.get('filtering_by_start'));
      text(' ');
      span('.user-stat-link', {
        'data-bind': 'text: hiddenCount'
      });
      text(' ');
      span({
        'data-bind': 'text: filteringByEndMessage'
      });
      text(' ');
      return span({
        'data-bind': 'text: filtersMessage'
      });
    };

    ReportView.prototype.bodyTemplate = function() {
      span({
        'data-bind': 'if: hasHiddenTweets'
      }, function() {
        span(function() {
          return messages.get('users_with_hidden_tweets') + ':';
        });
        return br(function() {});
      });
      span({
        'data-bind': 'foreach: usersPhotos'
      }, function() {
        return img({
          'data-bind': 'attr: {src: $data.src, title: $data.title}',
          style: 'margin-right:5px;',
          width: 24,
          height: 24
        });
      });
      return span({
        'data-bind': 'foreach: usersNames'
      }, function() {
        return div({
          'data-bind': 'text: $data + "&nbsp;&nbsp"'
        });
      });
    };

    ReportView.prototype.render = function(viewModel) {
      var html;
      $('.filter-report-component').each(function() {
        return ko.cleanNode(this);
      }).remove();
      html = CoffeeKup.render(this.template, {
        hardcode: {
          headerTemplate: this.headerTemplate,
          bodyTemplate: this.bodyTemplate
        }
      });
      $('.dashboard').find('>.component:not(:empty):eq(0),>.module:not(:empty):eq(0)').first().after(html);
      return ko.applyBindings(viewModel, $('.filter-report-component')[0]);
    };

    return ReportView;

  })(View);

  //Base class for implement the features
  Provider = (function() {
    function Provider() {}

    //Whether the current page is my page
    Provider.prototype.inMyProfilePage = function() {
      return this.screenUser() === this.sessionUser();
    };

    //Normalize all the users by deleteing "@"
    Provider.prototype.normalizeUser = function(x) {
      if (x != null) {
        return x.replace('@', '').trim();
      } else {
        return '';
      }
    };


    //Active all the settings
    Provider.getActive = function() {
      var p, providers, _i, _len, _ref2;
      providers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref2 = providers.map(function(x) {
        return new x;
      });
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        p = _ref2[_i];
        if (p.isActive()) {
          return p;
        }
      }
    };

    return Provider;

  })();

  //The inherited class for Provider to implement the features on the UI
  UIProvider = (function(_super) {
    __extends(UIProvider, _super);

    function UIProvider() {
      _ref2 = UIProvider.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    UIProvider.prototype.dialogView = new UIView;

    UIProvider.prototype.reportView = new ReportView;

    UIProvider.prototype.isActive = function() {
      return $('body').hasClass('t1');
    };

    //A helper function to filter the current page
    UIProvider.prototype.filterCurrentPage = function() {
      var isIgnorablePage, _ref3;
      isIgnorablePage = (_ref3 = location.pathname + location.hash, __indexOf.call(this.ignorablePages(), _ref3) >= 0);
      return !(this.inMyProfilePage() || isIgnorablePage);
    };

    //Whether the current page can be ignored
    UIProvider.prototype.ignorablePages = function() {
      return ['/' + this.sessionUser() + '/lists', '/i/#!/who_to_follow/suggestions', '/i/#!/who_to_follow/import', '/i/#!/who_to_follow/interests'];
    };

    //sessionuser
    UIProvider.prototype.sessionUser = function() {
      return this.normalizeUser($('.account-group.js-mini-current-user').data('screen-name'));
    };

    //screenuser
    UIProvider.prototype.screenUser = function() {
      return this.normalizeUser($('.screen-name:not(.hidden)').text());
    };

    //tweet
    UIProvider.prototype.tweets = function() {
      return $('div.tweet.js-stream-tweet');
    };

    //tweettext
    UIProvider.prototype.tweetText = function(el) {
      return $(el).find('.js-tweet-text, .tweet-text, .entry-content, .twtr-tweet-text').text();
    };

    //author
    UIProvider.prototype.tweetAuthor = function(el) {
      return this.normalizeUser($(el).find('.username').text());
    };

    //authorphoto
    UIProvider.prototype.tweetAuthorPhoto = function(el) {
      return $(el).find('img.avatar').attr('src');
    };

    //find retweeter
    UIProvider.prototype.tweetRetweeter = function(el) {
      var href;
      href = $(el).find('.pretty-link.js-user-profile-link').attr('href');
      if (href) {
        return href.replace('/#!/', '');
      } else {
        return '';
      }
    };

    UIProvider.prototype.onNewTweets = function(callback) {
      var _this = this;
      return $(document).on('DOMNodeInserted', '.stream .stream-items', function() {
        var tweetsCount;
        tweetsCount = _this.tweets().size();
        if (_this.tweetsCount !== tweetsCount) {
          _this.tweetsCount = tweetsCount;
          return callback();
        }
      });
    };

    return UIProvider;

  })(Provider);


  //Aother provider to combine with the UIProvider to implement the features. Most of the functions are similar
  HighlineProvider = (function(_super) {
    __extends(HighlineProvider, _super);

    function HighlineProvider() {
      _ref3 = HighlineProvider.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    HighlineProvider.prototype.dialogView = new UIView;

    HighlineProvider.prototype.reportView = new ReportView;

    HighlineProvider.prototype.isActive = function() {
      return true;
    };

    HighlineProvider.prototype.filterCurrentPage = function() {
      var isIgnorablePage, _ref4;
      isIgnorablePage = (_ref4 = location.pathname + location.hash, __indexOf.call(this.ignorablePages(), _ref4) >= 0);
      return !(this.inMyProfilePage() || isIgnorablePage);
    };

    HighlineProvider.prototype.ignorablePages = function() {
      return ['/' + this.sessionUser() + '/lists', '/i/#!/who_to_follow/suggestions', '/i/#!/who_to_follow/import', '/i/#!/who_to_follow/interests'];
    };

    HighlineProvider.prototype.sessionUser = function() {
      return this.normalizeUser($('.account-group.js-mini-current-user').data('screen-name'));
    };

    HighlineProvider.prototype.screenUser = function() {
      return this.normalizeUser($('.ProfileHeaderCard-screenname').text());
    };

    HighlineProvider.prototype.tweets = function() {
      return $('div.tweet.js-stream-tweet, .Grid[data-component-term="tweet"]');
    };

    HighlineProvider.prototype.tweetText = function(el) {
      return $(el).find('.js-tweet-text, .entry-content, .ProfileTweet-text').text();
    };

    HighlineProvider.prototype.tweetAuthor = function(el) {
      return this.normalizeUser($(el).find('.username').text());
    };

    HighlineProvider.prototype.tweetAuthorPhoto = function(el) {
      return $(el).find('img.js-action-profile-avatar').attr('src');
    };

    HighlineProvider.prototype.tweetRetweeter = function(el) {
      var href;
      href = $(el).find('.pretty-link.js-user-profile-link').attr('href');
      if (href) {
        return href.replace('/#!/', '');
      } else {
        return '';
      }
    };

    HighlineProvider.prototype.onNewTweets = function(callback) {
      var _this = this;
      return $(document).on('DOMNodeInserted', '.stream .stream-items', function() {
        var tweetsCount;
        tweetsCount = _this.tweets().size();
        if (_this.tweetsCount !== tweetsCount) {
          _this.tweetsCount = tweetsCount;
          return callback();
        }
      });
    };

    return HighlineProvider;

  })(Provider);

 //Extension class
  Extension = (function() {
    Extension.prototype.provider = Provider.getActive(UIProvider, HighlineProvider);

    function Extension() {
      var _this = this;
      this.dialogViewModel = new DialogViewModel;
      this.reportViewModel = new ReportViewModel(this.dialogViewModel);
      this.provider.dialogView.render(this.dialogViewModel);
      $(window).on('hashchange', function() {
        return setTimeout((function() {
          return _this.applyBlocker();
        }), 500);
      });
      this.provider.onNewTweets(function() {
        return _this.applyBlocker();
      });
      this.dialogViewModel.onSettingsChange(function() {
        return _this.applyBlocker();
      });
      this.applyBlocker();
    }

    //the algorithm function to block the tweets
    Extension.prototype.applyBlocker = function() {
      var _this = this;
      return this.throttle(10, function() {
        var apply, hiddenCount, hiddenUsers, termsRegExp, usersRegExp;
        _this.dialogViewModel.reload();
        apply = _this.dialogViewModel.enabled() && _this.provider.filterCurrentPage();
        if (apply) {
          termsRegExp = _this.filterRegExp(_this.filterPattern(_this.dialogViewModel.termsList(), false));
          usersRegExp = _this.filterRegExp(_this.filterPattern(_this.dialogViewModel.usersList(), true));
        }
        hiddenCount = 0;
        hiddenUsers = {};
        _this.provider.tweets().each(function(i, el) {
          var foundTermsMatches, foundUserMatches, termsMatch, tweetAuthor, usersMatch;
          termsMatch = false;
          usersMatch = false;
          if (apply) {
            tweetAuthor = _this.provider.tweetAuthor(el);
            if (termsRegExp != null) {
              termsRegExp.lastIndex = 0;
              foundTermsMatches = termsRegExp.test(_this.provider.tweetText(el));
              termsMatch = _this.dialogViewModel.termsExclude() === foundTermsMatches;
            }
            if (usersRegExp != null) {
              usersRegExp.lastIndex = 0;
              foundUserMatches = usersRegExp.test(tweetAuthor);
              if (!foundUserMatches) {
                usersRegExp.lastIndex = 0;
                foundUserMatches = usersRegExp.test(_this.provider.tweetRetweeter(el));
              }
              usersMatch = _this.dialogViewModel.usersExclude() === foundUserMatches;
            }
          }
          //Not display
          if (termsMatch || usersMatch) {
            el.style.display = 'none';
            hiddenCount++;
            if (!(tweetAuthor in hiddenUsers)) {
              return hiddenUsers[tweetAuthor] = _this.provider.tweetAuthorPhoto(el);
            }
          } else {
            return el.style.display = 'block'; //display
          }
        });
        _this.reportViewModel.applied(apply).hasTerms(termsRegExp != null).hasUsers(usersRegExp != null).hiddenCount(hiddenCount).hiddenUsers(hiddenUsers);
        return _this.throttle(1000, function() {
          return _this.provider.reportView.render(_this.reportViewModel);
        });
      });
    };

    //Set the delay
    Extension.prototype.throttle = (function() {
      var timeout;
      timeout = {};
      return function(delay, fn) {
        var key;
        key = fn.toString();
        clearTimeout(timeout[key]);
        return timeout[key] = setTimeout(fn, delay);
      };
    })();

    //Igonores and modify some symblos
    Extension.prototype.filterPattern = function(csv, whole) {
      var values;
      values = csv.split(',');
      values = $.map(values, function(v, i) {
        v = $.trim(v);
        if (v.length > 2 && v[0] === '/' && v[v.length - 1] === '/') {
          return v.substr(1, v.length - 2);
        } else {
          return v.replace(/([\.\(\)\[\]\{\}\+\*\?\\])/g, '\\$1');
        }
      });
      values = $.grep(values, function(v, i) {
        return v !== '';
      });
      if (values.length === 0) {
        return null;
      }
      values = '(' + values.join('|') + ')';
      if (whole) {
        return "^" + values + "$";
      } else {
        return values;
      }
    };

    //Change the input to the RegExp
    Extension.prototype.filterRegExp = function(pattern) {
      var e;
      if (pattern == null) {
        return null;
      }
      try {
        return new RegExp(pattern, 'gi');
      } catch (_error) {
        e = _error;
        return null;
      }
    };

    return Extension;

  })();

  new Extension();

}).call(this);
